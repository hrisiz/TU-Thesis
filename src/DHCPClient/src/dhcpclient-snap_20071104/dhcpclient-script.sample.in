#!/bin/sh

# set -x

# An example script to be executed by the statemachine of the dhcpclient
# binary whenever it changes state.


DHCP_DEV=$1		# The interface this client is running on
DHCP_STATE=$2		# The new state
DHCP_OLDSTATE=$3	# The previous state

# See dhcpprotocol.h for current values
# typedef enum {
#   REBOOTING,
#   OPER_DOWN,
#   ARP_CHECK_GATEWAY,
#   INIT_REBOOT,
#   INIT,
#   /* SELECTING, we use fastest server */
#   REQUESTING,
#   ARP_CHECK,
#   DECLINING, /* Pseudo state to send decline message after ARP_CHECK */
#   BOUND,
#   RENEWING,
#   REBINDING,
#   RELEASING /* during shutdown */
# } dhcp_state;

FULL_SCRIPTNAME=@PREFIX@/sbin/dhcpclient
SCRIPTNAME=`basename $FULL_SCRIPTNAME`
REMEMBER_BOUND=/var/lib/dhcpclient/$DHCP_DEV.last
DEBUGFILE=/var/log/dhcpclient.debug
RESOLV_CONF_BACKUP=/var/run/dhcpclient/resolv.conf-backup
# For modifyresolvconfdebian
if test -x /sbin/resolvconf ; then
	RESOLVCONF=true
fi
# In most cases, dhcpclient will be compiled with syslog built in.
# If not and you want syslog messages then comment this in.
# SYSLOGVIASCRIPT=true

DIR=`dirname $REMEMBER_BOUND`
if test ! -d $DIR; then
	mkdir -p $DIR
fi

DIR=`dirname $DEBUGFILE`
if test ! -d $DIR; then
	mkdir -p $DIR
fi

DIR=`dirname $RESOLV_CONF_BACKUP`
if test ! -d $DIR; then
	mkdir -p $DIR
fi

# ================== IPv6 address handling example =====================
#
# If we are at University of Kaiserslautern, set IPv6 address accordingly
function setipv6address()
{
	# IP address cannot change during renewing
	if test "$DHCP_OLDSTATE" != "RENEWING"; then
		if echo "$DHCP_CURRENT_ADDRESS" | grep -q '^131.246.'; then
			ip -6 addr flush dev $DHCP_DEV scope global
			ip addr add 2001:638:208:$(echo "$DHCP_CURRENT_ADDRESS" | sed 's/^131.246.\([0-9]*\).\([0-9]*\)/\1::\2/')/64 dev $DHCP_DEV
		fi
	fi
}

function clearipv6address()
{
	ip -6 addr flush dev $DHCP_DEV scope global
}

# ================== Modify resolv.conf for Debian =============
#
# This uses the optional Debian package resolvconf if installed and
# falls back to the generic method otherwise.
function modifyresolvconfdebian()
{
	if [ -n "$RESOLVCONF" ]; then
		R=""
		test -n "$DHCP_CURRENT_DOMAINNAME" && R="${R}search $DHCP_CURRENT_DOMAINNAME\n"
		test -n "$DHCP_CURRENT_DNS_0" && R="${R}nameserver $DHCP_CURRENT_DNS_0\n"
		test -n "$DHCP_CURRENT_DNS_1" && R="${R}nameserver $DHCP_CURRENT_DNS_1\n"
		test -n "$DHCP_CURRENT_DNS_2" && R="${R}nameserver $DHCP_CURRENT_DNS_2\n"

		echo -e "$R" | /sbin/resolvconf -a $DHCP_DEV
	else
		modifyresolvconfgeneric
	fi
}

# Restore resolv.conf to old contents on Debian
function restoreresolvconfdebian()
{
	if [ -n "$RESOLVCONF" ]; then
		/sbin/resolvconf -d $DHCP_DEV
	else
		restoreresolvconfgeneric
	fi

}

# ================== Modify resolv.conf for Suse =============
#
# Suse provides a script that modifies resolv.conf. Use it because it will
# restart/reload all other services that care about it (e.g. lwresd).
function modifyresolvconfsuse()
{
	RESOLV_OPTS=''
	test -n "$DHCP_CURRENT_DNS_0" && RESOLV_OPTS="-n \"$DHCP_CURRENT_DNS_0 $DHCP_CURRENT_DNS_1 $DHCP_CURRENT_DNS_2\""
	test -n "$DHCP_CURRENT_DOMAINNAME" && RESOLV_OPTS="$RESOLV_OPTS -d $DHCP_CURRENT_DOMAINNAME"
	test -n "$RESOLV_OPTS" && eval /sbin/modify_resolvconf modify -s dhcpclient -p $SCRIPTNAME -f $FULL_SCRIPTNAME -e $DHCP_DEV $RESOLV_OPTS -t \"This file was created by dhcpclient\"
}

# Restore resolv.conf to old contents on Suse
function restoreresolvconfsuse()
{
	/sbin/modify_resolvconf restore -s dhcpclient -p $SCRIPTNAME -f $FULL_SCRIPTNAME -e $DHCP_DEV
}

# ================== Genric code to modify resolv.conf =======
#
# Modify resolv.conf as generically as possible
# Snarfed from vpnc-script (c) by Maurice Massar et al.
modifyresolvconfgeneric() {
	grep '^#@DHCPCLIENT_GENERATED@' /etc/resolv.conf > /dev/null 2>&1 || cp -- /etc/resolv.conf "$RESOLV_CONF_BACKUP"
	NEW_RESOLVCONF="#@DHCPCLIENT_GENERATED@ -- this file is generated by vpnc
# and will be overwritten by vpnc
# as long as the above mark is intact"
	
	exec 6< "$RESOLV_CONF_BACKUP"
	while read LINE <&6 ; do
		case "$LINE" in
			nameserver*)
				LINE=""
				;;
			domain*|search*)
				if [ -n "$DHCP_CURRENT_DOMAINNAME" ]; then
					LINE="$LINE $DHCP_CURRENT_DOMAINNAME"
					DHCP_CURRENT_DOMAINNAME=""
				fi
				;;
		esac
		NEW_RESOLVCONF="$NEW_RESOLVCONF
$LINE"
	done
	exec 6<&-
	
	for i in "$DHCP_CURRENT_DNS_0 $DHCP_CURRENT_DNS_1 $DHCP_CURRENT_DNS_2" ; do
		NEW_RESOLVCONF="$NEW_RESOLVCONF
nameserver $i"
	done
	if [ -n "$DHCP_CURRENT_DOMAINNAME" ]; then
		NEW_RESOLVCONF="$NEW_RESOLVCONF
search $DHCP_CURRENT_DOMAINNAME"
	fi
	echo "$NEW_RESOLVCONF" > /etc/resolv.conf
}

# Restore resolv.conf to old contents on generic systems
# Snarfed from vpnc-script (c) by Maurice Massar et al.
restoreresolvconfgeneric() {
	if [ ! -e "$RESOLV_CONF_BACKUP" ]; then
		return
	fi
	grep '^#@DHCPCLIENT_GENERATED@' /etc/resolv.conf > /dev/null 2>&1 && cat "$RESOLV_CONF_BACKUP" > /etc/resolv.conf
	rm -f -- "$RESOLV_CONF_BACKUP"
}

# ================== Log parameters sent by dhcp-server ======
#
# Log the last address that was bound to a specific interface
function rememberbound()
{
	echo "# ============== " `date "+%F %R:%S.%N %Z"` "===================" >$REMEMBER_BOUND
	set | grep ^DHCP_ >>$REMEMBER_BOUND
}

# ================== Debug: Show statemachine changes ========
#
# Log all statechanges
function writedebug()
{
	echo "# ============== " `date "+%F %R:%S.%N %Z"` "===================" >>$DEBUGFILE
	set | grep ^DHCP_ >>$DEBUGFILE
}

# ========================== Syslog: Write logmessage ========
#
# Log to syslog
function syslog()
{
	logger -p daemon.info -t "$SCRIPTNAME" "$DHCP_DEV $*"
}

# ============================================================
# ================== Main ====================================
# ============================================================
#
writedebug
case "$DHCP_STATE" in
	INIT)
		test -n SYSLOGVIASCRIPT && syslog $DHCP_STATE
		# restoreresolvconfgeneric
		# restoreresolvconfdebian
		restoreresolvconfsuse
		# clearipv6address
		;;
	BOUND)
		test -n SYSLOGVIASCRIPT && syslog $DHCP_STATE $DHCP_OFFERED_ADDRESS for $DHCP_OFFERED_LEASE seconds
		rememberbound
		CURRENT="x$DHCP_CURRENT_ADDRESS$DHCP_CURRENT_DNS_0$DHCP_CURRENT_DNS_1$DHCP_CURRENT_DNS_2$DHCP_CURRENT_DOMAINNAME"
		PREVIOUS="x$DHCP_PREVIOUS_ADDRESS$DHCP_PREVIOUS_DNS_0$DHCP_PREVIOUS_DNS_1$DHCP_PREVIOUS_DNS_2$DHCP_PREVIOUS_DOMAINNAME"
		if [ $CURRENT != $PREVIOUS ]; then
			# modifyresolvconfgeneric
			# modifyresolvconfdebian
			modifyresolvconfsuse
			# setipv6address
		fi
		;;
	OPER_DOWN|RELEASING)
		test -n SYSLOGVIASCRIPT && syslog $DHCP_STATE 
		# restoreresolvconfgeneric
		# restoreresolvconfdebian
		restoreresolvconfsuse
		# clearipv6address
		;;
	*)
		test -n SYSLOGVIASCRIPT && syslog $DHCP_STATE
		;;
esac
exit 0
